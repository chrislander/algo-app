{"version":3,"sources":["components/Board.js","components/Button.js","components/App.js","classes/arrGenerator.js","serviceWorker.js","index.js"],"names":["Board","this","props","arr","length","id","map","d","i","className","key","style","height","React","Component","Button","rtype","onClick","handleClick","variant","title","handleArr","App","state","ms","Promise","resolve","setTimeout","arrLength","push","Math","floor","random","generateArr","setState","console","log","iarr","swapped","sleep","tmp","Container","Jumbotron","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kSA4BeA,E,uKArBX,OAFqBC,KAAKC,MAAMC,IAAIC,OAEjB,EAEf,yBAAKC,GAAG,oBAOR,yBAAKA,GAAG,mBACHJ,KAAKC,MAAMC,IAAIG,KAAI,SAACC,EAAGC,GAAJ,OAClB,yBAAKC,UAAU,MAAMC,IAAKF,EAAGG,MAAO,CAACC,OAAOL,a,GAhBtCM,IAAMC,WCuBXC,E,uKAhBX,IAAMC,EAAQf,KAAKC,MAAMc,MAEzB,MAAc,gBAAVA,EAEE,4BAAQC,QAAShB,KAAKC,MAAMgB,YAAaT,UAAU,kBAAkBU,QAAQ,WAAWlB,KAAKC,MAAMkB,OAI3F,cAAVJ,EAEA,4BAAQC,QAAShB,KAAKC,MAAMmB,UAAWZ,UAAU,oBAAoBU,QAAQ,aAAalB,KAAKC,MAAMkB,YAFzG,M,GAbiBN,a,ICgFNQ,E,4MA1EbC,MAAQ,CACNpB,IAAM,I,oDAIFqB,GACJ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,Q,oCAIlD,IAAIrB,ECpBD,SAAqByB,GAG1B,IAFA,IAAIzB,EAAM,GAEDK,EAAI,EAAGA,EAAIoB,EAAYpB,IAC5BL,EAAI0B,KAAKC,KAAKC,MAAsB,IAAfD,KAAKE,SAAkB,IAEhD,OAAO7B,EDcK8B,CAAY,KACtBhC,KAAKiC,SAAS,CAAE/B,IAAIA,M,wJAKpBgC,QAAQC,IAAInC,KAAKsB,MAAMpB,KAGnBkC,EAAOpC,KAAKsB,MAAMpB,I,OAGpBmC,GAAU,EACD9B,EAAI,E,YAAGA,EAAI6B,EAAKjC,Q,sBAEpBiC,EAAK7B,GAAK6B,EAAK7B,EAAI,I,iCACdP,KAAKsC,MAAM,I,OACbC,EAAMH,EAAK7B,EAAI,GACnB6B,EAAK7B,EAAI,GAAK6B,EAAK7B,GACnB6B,EAAK7B,GAAKgC,EACVF,GAAU,EACVrC,KAAKiC,SAAS,CAAE/B,IAAIkC,IACpBF,QAAQC,IAAI,W,QATiB5B,I,2BAad,IAAZ8B,E,sJAKT,OACE,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6BACE,uCAEA,kBAAC,EAAD,CACEtB,MAAM,eACNJ,MAAM,cACNE,YAAejB,KAAKiB,YAAYyB,KAAK1C,QAGvC,kBAAC,EAAD,CACEmB,MAAM,aACNJ,MAAM,YACNK,UAAapB,KAAKoB,UAAUsB,KAAK1C,QAGnC,kBAAC,EAAD,CACEmB,MAAM,aACNjB,IAAOF,KAAKsB,MAAMpB,a,GA9DdU,IAAMC,WEGJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.ae48fcc7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Board extends React.Component {\r\n\r\n  render() {\r\n    const arrGenerated = this.props.arr.length;\r\n\r\n    if (arrGenerated < 1) {    \r\n      return (\r\n        <div id=\"lines-container\"></div>\r\n      );\r\n    }\r\n   \r\n   \r\n   else {\r\n      return (\r\n        <div id=\"lines-container\">\r\n            {this.props.arr.map((d, i) =>(\r\n              <div className=\"bar\" key={i} style={{height:d}}>\r\n\r\n              </div>\r\n            ))}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\n\r\n//import { generateArr } from \"../classes/arrGenerator.js\";\r\n\r\nclass Button extends Component {\r\n\r\n \r\n\r\n  render() {\r\n    const rtype = this.props.rtype;\r\n\r\n    if (rtype === 'createArray'){\r\n        return (\r\n          <button onClick={this.props.handleClick} className=\"btn btn-primary\" variant=\"primary\">{this.props.title}</button>      \r\n        );\r\n    }\r\n\r\n    if (rtype === 'sortArray'){\r\n      return (\r\n        <button onClick={this.props.handleArr} className=\"btn btn-secondary\" variant=\"secondary\">{this.props.title}</button>      \r\n      );\r\n    }    \r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport { Jumbotron, Container } from 'react-bootstrap';\r\nimport Board from './Board';\r\nimport Button from './Button'\r\n\r\nimport { generateArr } from \"../classes/arrGenerator.js\";\r\n\r\n//import { bubbleSort } from \"../classes/sorting/algoBubbleSort.js\"\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    arr : ''\r\n  };\r\n\r\n\r\n  sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  handleClick() {\r\n    let arr = generateArr(100);\r\n    this.setState({ arr:arr });      \r\n  }\r\n\r\n  async handleArr() {\r\n  \r\n    console.log(this.state.arr)\r\n\r\n    let swapped;\r\n    let iarr = this.state.arr;\r\n    \r\n    do {\r\n      swapped = false;\r\n      for (let i = 0; i < iarr.length; i++ ){\r\n\r\n        if(iarr[i] > iarr[i + 1]){\r\n          await this.sleep(25)\r\n          let tmp = iarr[i + 1];\r\n          iarr[i + 1] = iarr[i];\r\n          iarr[i] = tmp;\r\n          swapped = true;\r\n          this.setState({ arr:iarr });  \r\n          console.log('redrawn');\r\n  \r\n        }\r\n      }\r\n    } while (swapped === true )\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container >\r\n        <Jumbotron>\r\n          <div>\r\n            <h3>The App</h3>\r\n\r\n            <Button\r\n              title=\"Create Array\"\r\n              rtype=\"createArray\"\r\n              handleClick = {this.handleClick.bind(this)}              \r\n            />\r\n\r\n            <Button \r\n              title=\"BubbleSort\"\r\n              rtype=\"sortArray\"\r\n              handleArr = {this.handleArr.bind(this)}      \r\n            />\r\n\r\n            <Board\r\n              title=\"Scoreboard\"\r\n              arr = {this.state.arr}\r\n            />\r\n          </div>\r\n        </Jumbotron>\r\n      </ Container>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","export function generateArr(arrLength){\r\n  let arr = [];\r\n\r\n  for (let i = 0; i < arrLength ; i++){\r\n      arr.push(Math.floor((Math.random() *250 ) + 1));\r\n  }\r\n  return arr;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}